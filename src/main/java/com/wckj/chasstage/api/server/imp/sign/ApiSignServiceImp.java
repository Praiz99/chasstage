package com.wckj.chasstage.api.server.imp.sign;import com.google.gson.Gson;import com.wckj.chasstage.api.def.sign.service.ApiSignService;import com.wckj.chasstage.common.util.*;import com.wckj.chasstage.modules.baqry.entity.ChasBaqryxx;import com.wckj.chasstage.modules.baqry.service.ChasBaqryxxService;import com.wckj.chasstage.modules.sign.entity.ChasSign;import com.wckj.chasstage.modules.sign.service.ChasSignService;import com.wckj.framework.api.ApiReturnResult;import org.apache.commons.lang.ArrayUtils;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @ClassName : ApiSignServiceImp  //类名 * @Description : 签字捺印  //描述 * @Author : lcm  //作者 * @Date: 2020-09-11 09:36  //时间 */@Servicepublic class ApiSignServiceImp implements ApiSignService {    @Autowired    private ChasSignService signService;    @Autowired    private ChasBaqryxxService baqryxxService;    @Override    public ApiReturnResult<String> deleteSignByRybh(String rybh, String signType) {        ApiReturnResult apiReturnResult = new ApiReturnResult();        String[] signArr = signType.split(",");        int num = 0;        for (int i = 0; i < signArr.length; i++) {            num += signService.deleteByPrimaryRybh(rybh, signArr[i]);        }        if (num > 0) {            apiReturnResult.setCode("200");            apiReturnResult.setMessage("签字数据删除成功");        } else {            apiReturnResult.setCode("500");            apiReturnResult.setMessage("签字数据删除失败");        }        return apiReturnResult;    }    @Override    public ApiReturnResult<String> deleteSignByRybhKhd(String rybh, String inxs) {        Map<String, Object> params = new HashMap<String, Object>();        params.put("rybh", rybh);        String[] strings = getTypeByInx(rybh, inxs);        params.put("signTypeList", strings);        if (StringUtils.isNotEmpty(rybh)) {            List<ChasSign> signlist = signService.findList(params, null);            try {                for (ChasSign chasSign : signlist) {                    signService.deleteById(chasSign.getId());                }            } catch (Exception e) {                return ResultUtil.ReturnError("操作异常:" + e.getMessage());            }        }        return ResultUtil.ReturnSuccess("操作成功!");    }    @Override    public ApiReturnResult<String> getSignByRybhOrsignType(String rybh, String signType) {        ApiReturnResult apiReturnResult = new ApiReturnResult();        Map<String, Object> map = signService.getSignData(rybh, signType);        boolean flag = (boolean) map.get("success");        if (flag) {            apiReturnResult.setData(map);            apiReturnResult.setCode("200");            apiReturnResult.setMessage("签字数据成功");        } else {            apiReturnResult.setCode("500");            apiReturnResult.setMessage(map.get("msg").toString());        }        return apiReturnResult;    }    @Override    public ApiReturnResult<?> getSignDataComprehensive(String rybh, String signType,boolean removeNy,boolean isIgnore) {        List<Map<String, Object>> result = signService.getSignDataComprehensive(rybh,signType,removeNy,isIgnore);        if(result != null){            return ResultUtil.ReturnSuccess("获取签字捺印成功!",result);        }else{            return ResultUtil.ReturnSuccess("暂无数据!");        }    }    @Override    public ApiReturnResult<String> getSignByRybhOrsignTypeKhd(String rybh, String signType) {        ApiReturnResult apiReturnResult = new ApiReturnResult();        Map<String, Object> map = signService.getSignDataByRybhKhd(rybh, signType);        boolean flag = (boolean) map.get("success");        if (flag) {            apiReturnResult.setCode("200");            apiReturnResult.setData(map);            apiReturnResult.setMessage("签字数据成功");        } else {            apiReturnResult.setCode("500");            apiReturnResult.setMessage(map.get("msg").toString());        }        return apiReturnResult;    }    @Override    public ApiReturnResult<String> getSignByRybhOrsignTypeKhdIgnoreOfBase64(String rybh, String signType) {        ApiReturnResult apiReturnResult = new ApiReturnResult();        Map<String, Object> map = signService.getSignDataByRybhKhdIgnoreOfBase64(rybh, signType);        boolean flag = (boolean) map.get("success");        if (flag) {            apiReturnResult.setCode("200");            apiReturnResult.setData(map);            apiReturnResult.setMessage("签字数据成功");        } else {            apiReturnResult.setCode("500");            apiReturnResult.setMessage(map.get("msg").toString());        }        return apiReturnResult;    }    @Override    public ApiReturnResult<String> saveSign(String rybh, String signType, String imgBody, String signName) {        ApiReturnResult apiReturnResult = new ApiReturnResult();        int num = signService.saveSignData(rybh, signType, imgBody, signName);        if (num == 1) {            apiReturnResult.setCode("200");            apiReturnResult.setMessage("签字数据添加成功");        } else {            apiReturnResult.setCode("500");            apiReturnResult.setMessage("签字数据添加失败");        }        return apiReturnResult;    }    @Override    public ApiReturnResult<String> saveSignKhd(String rybh, String imgBody, String inxs) {        Map<String, Object> params = new HashMap<String, Object>();        params.put("rybh", rybh);        if(StringUtil.isEmpty(rybh)){            return ResultUtil.ReturnError("人员编号不能为空!");        }        if(StringUtil.isEmpty(imgBody)){            return ResultUtil.ReturnError("签字捺印数据不能为空!");        }        ChasSign chasSign = new ChasSign();        if (StringUtils.isNotEmpty(rybh)) {            List<ChasBaqryxx> ryxxlist = baqryxxService.findList(params, null);            if (!ryxxlist.isEmpty()) {                ChasBaqryxx ryxx = ryxxlist.get(0);                chasSign.setRyxm(ryxx.getRyxm());                chasSign.setZbdwBh(ryxx.getZbdwBh());                chasSign.setLrrSfzh(ryxx.getRysfzh());            }        }        String[] types = getTypeByInx(rybh, inxs);        try {            for (String type : types) {                params.put("signType", type);                if (StringUtils.isNotEmpty(type)) {                    List<ChasSign> signlist = signService.findList(params, null);                    if (signlist.isEmpty()) {                        chasSign.setId(com.wckj.framework.core.utils.StringUtils.getGuid32());                        chasSign.setIsdel(SYSCONSTANT.ALL_DATA_MARK_NORMAL_I);                        chasSign.setLrsj(new Date());                        chasSign.setSignType(type);                        chasSign.setImgBody(imgBody);                        chasSign.setSignName(getNameByType(rybh, type));                        chasSign.setRybh(rybh);                        signService.save(chasSign);                    } else {                        ChasSign cs = signlist.get(0);                        cs.setImgBody(chasSign.getImgBody());                        signService.update(chasSign);                    }                }            }        } catch (Exception e) {            return ResultUtil.ReturnError("saveSignKhd:" + e.getMessage());        }        return ResultUtil.ReturnSuccess("保存成功!");    }    @Override    public ApiReturnResult<String> saveWebSign(String rybh, String data) {        try {            Gson gson = new Gson();            Map<String, Object> params = new HashMap<>();            params.put("rybh", rybh);            List<Map<String, Object>> listMap = gson.fromJson(data, List.class);            for (Map<String, Object> map : listMap) {                String del = map.get("DelFlag").toString().split("\\.")[0];                String id = map.get("Id").toString().split("\\.")[0];                String imgData = map.get("ImgData").toString();                String[] types = getTypeByInx(rybh, id);                if (StringUtil.isNotEmpty(rybh)) {                    if (StringUtil.equals(del, "1")) {  //删除                        ApiReturnResult result = deleteSignByRybh(rybh, StringUtils.join(types, ","));                        if (!result.getIsSuccess()) {                            return ResultUtil.ReturnError(result.getMessage());                        }                    } else if (StringUtil.equals(del, "0")) {  //保存                        for (String type : types) {                            ApiReturnResult result = saveSign(rybh, type, imgData, getNameByType(rybh, type));                            if (!result.getIsSuccess()) {                                return ResultUtil.ReturnError(result.getMessage());                            }                        }                    }                }            }        } catch (Exception e) {            return ResultUtil.ReturnError("保存失败:" + e.getMessage());        }        return ResultUtil.ReturnSuccess("操作成功!");    }    public String[] getTypeByInx(String rybh, String inxs) {        ChasBaqryxx baqryxx = baqryxxService.findByRybh(rybh);        SignqmnyConfig config = SignbsUtil.getSignByConfiguration(baqryxx.getBaqid());        String[] qmType = config.getQmny();        String[] result = new String[0];        for (String integer : inxs.split(",")) {            int inx = Integer.parseInt(integer);            String Sname = qmType[inx];            String[] Snames = Sname.split("\\+");            result = (String[]) ArrayUtils.addAll(result, Snames);        }        return result;    }    public String getNameByType(String rybh, String type) {        ChasBaqryxx baqryxx = baqryxxService.findByRybh(rybh);        SignqmnyConfig config = SignbsUtil.AnalysisByConfig(baqryxx.getBaqid(), true);        String[] qmType = config.getQmny();        String[] qmName = config.getQmts();        String[] result = new String[0];        for (int i = 0; i < qmType.length; i++) {            if (StringUtil.equals(qmType[i], type)) {                return qmName[i];            }        }        return "";    }}